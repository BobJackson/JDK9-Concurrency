package com.wangyousong.concurrency.ch10.recipe03;

import java.util.concurrent.LinkedTransferQueue;

/**
 * Main class of the example. It executes 100 producers and 100 consumers
 */
public class Main {

    /**
     * @param args
     */
    public static void main(String[] args) {

        final int THREADS = 100;
        /*
         * Create a Linked TransferQueue of Strings to store the objects
         * generated by the producers and consumed by the consumer.
         *
         * (1) It's a blocking data structure. The thread is blocked until the operation can be
         *  made, provided that the operations are performed immediately.
         * (2) Its size has no limit. You can insert as many elements as you want.
         * (3) It's a parameterized class. You have to indicate the class of the elements you're
         *  going to store in the list.
         */
        LinkedTransferQueue<String> buffer = new LinkedTransferQueue<>();
        /*
         * An array to store the Thread objects that execute the producers
         */
        Thread[] producerThreads = new Thread[THREADS];

        /*
         * An array to store the Thread objects that execute the consumers
         */
        Thread[] consumerThreads = new Thread[THREADS];

        /*
         * Launch 100 Consumer tasks
         */
        for (int i = 0; i < THREADS; i++) {
            Consumer consumer = new Consumer("Consumer " + i, buffer);
            consumerThreads[i] = new Thread(consumer);
            consumerThreads[i].start();
        }

        /*
         * Launch 100 Producer tasks
         */
        for (int i = 0; i < THREADS; i++) {
            Producer producer = new Producer("Producer: " + i, buffer);
            producerThreads[i] = new Thread(producer);
            producerThreads[i].start();
        }

        /*
         * Wait for the finalization of the threads
         */
        for (int i = 0; i < THREADS; i++) {
            try {
                producerThreads[i].join();
                consumerThreads[i].join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        /*
         * Write the size of the buffer in the Console
         */
        System.out.printf("Main: Size of the buffer: %d%n", buffer.size());
        System.out.printf("Main: End of the example%n");
    }

}
